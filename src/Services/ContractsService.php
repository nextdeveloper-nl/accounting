<?php

namespace NextDeveloper\Accounting\Services;

use Carbon\Carbon;
use Illuminate\Support\Str;
use NextDeveloper\Accounting\Database\Models\Accounts;
use NextDeveloper\Accounting\Services\AbstractServices\AbstractContractsService;
use NextDeveloper\IAM\Helpers\UserHelper;

/**
 * This class is responsible from managing the data for Contracts
 *
 * Class ContractsService.
 *
 * @package NextDeveloper\Accounting\Database\Models
 */
class ContractsService extends AbstractContractsService
{

    // EDIT AFTER HERE - WARNING: ABOVE THIS LINE MAY BE REGENERATED AND YOU MAY LOSE CODE

    public static function create(array $data)
    {
        $termsAvailable = config('business.contracts.terms_available');

        if(!array_key_exists('term_starts', $data))
            $data['term_starts'] = now();
        else {
            $data['term_starts'] = Carbon::parse($data['term_starts']);
        }

        if(!array_key_exists('term_ends', $data)) {
            $longestTerm = end($termsAvailable);

            $data['term_ends'] = now()->addMonths($longestTerm);
        } else {
            $data['term_ends'] = Carbon::parse($data['term_ends']);
        }

        $diffInMonths = $data['term_starts']->diffInMonths($data['term_ends']);

        if(!in_array($diffInMonths, $termsAvailable)) {
            $termsAvailable = config('business.contracts.terms_available');
            $longestTerm = end($termsAvailable);
            $data['term_ends'] = $data['term_starts']->copy()->addMonths($longestTerm);
        }

        return parent::create($data); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @param array $data
     * @return void
     */
    public static function update($id, array $data)
    {
        if(array_key_exists('is_signed', $data) && !UserHelper::has('accounting-admin')) {
            unset($data['is_signed']);
            unset($data['is_approved']);
        }

        if(array_key_exists('discount_fixed', $data) && !UserHelper::has('sales-admin')) {
            unset($data['discount_fixed']);
            unset($data['price_fixed']);
        }

        if(array_key_exists('term_starts', $data)) {
            $start = Carbon::parse($data['term_starts']);
            $end = Carbon::parse($data['term_ends']);

            $diff = $start->diffInMonths($end);

            $termsAvailable = config('business.contracts.terms_available');

            foreach ($termsAvailable as $term) {
                if($diff > $term)
                    continue;

                $diff = $term;
                break;
            }

            $data['term_ends'] = $start->copy()->addMonths($term);
        }

        return parent::update($id, $data);
    }
}
