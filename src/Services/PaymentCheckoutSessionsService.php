<?php

namespace NextDeveloper\Accounting\Services;

use Helpers\InvoiceHelper;
use NextDeveloper\Accounting\Exceptions\CheckoutSessionException;
use NextDeveloper\Accounting\PaymentGateways\IyzicoTurkey;
use NextDeveloper\Accounting\PaymentGateways\Stripe;
use NextDeveloper\Accounting\Services\AbstractServices\AbstractPaymentCheckoutSessionsService;

/**
 * This class is responsible from managing the data for PaymentCheckoutSessions
 *
 * Class PaymentCheckoutSessionsService.
 *
 * @package NextDeveloper\Accounting\Database\Models
 */
class PaymentCheckoutSessionsService extends AbstractPaymentCheckoutSessionsService
{

    // EDIT AFTER HERE - WARNING: ABOVE THIS LINE MAY BE REGENERATED AND YOU MAY LOSE CODE

    public static function create(array $data)
    {
        $invoice = InvoiceHelper::getInvoiceById($data['accounting_invoice_id']);
        $gateway = InvoiceHelper::getGatewayForInvoice($invoice);

        if(!$gateway) {
            throw new CheckoutSessionException('Payment gateway not found for this invoice. Please consult to your administrator.');
        }

        $config = config('leo.payment.available_options.' . $gateway->name);

        if(!$config) {
            throw new CheckoutSessionException('Payment gateway configuration not found for this invoice. Please consult to your administrator.');
        }

        if(!in_array('checkout_sessions', $config)) {
            throw new CheckoutSessionException('Checkout sessions is not available in your country. Please consult to your administrator.');
        }

        switch($gateway->name) {
            case 'stripe-usa':
                $sessionData = (new Stripe($gateway))->createCheckoutSession($invoice);
                break;
            case 'iyzico-turkey':
                $sessionData = (new IyzicoTurkey($gateway))->createCheckoutSession($invoice);
                break;
        }

        dd('we have a valid gateway and config', $gateway, $config);

        return parent::create($data); // TODO: Change the autogenerated stub
    }
}
